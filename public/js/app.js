"use strict";var opsVisionApp=angular.module("opsVisionApp",["opsVisionfilters","ngRoute","ui.grid","ui.grid.resizeColumns","ui.grid.exporter","ui.grid.selection","ui.grid.rowEdit","ui.grid.edit","ui.grid.autoResize","ui.grid.cellNav","ngCookies","smart-table"]);opsVisionApp.config(["$routeProvider","$locationProvider",function(e,t){e.when("/urls",{templateUrl:"/partials/urls.html",controller:"URLsCtrl"}),e.when("/channels",{templateUrl:"/partials/channels.html",controller:"ChannelsCtrl"}),e.when("/channel_details/:channelid",{templateUrl:"/partials/channel_details.html",controller:"ChannelDetailsCtrl"}),e.when("/broadcast_list/",{templateUrl:"/partials/broadcast_list.html",controller:"BroadcastListCtrl"}),e.when("/home/:hide_nav?",{templateUrl:"/partials/home.html",controller:"HomeCtrl"}),e.when("/admin/:revertadmin?",{templateUrl:"/partials/home.html",controller:"AdminHomeCtrl"}),e.when("/dashboard_details/:dashboard_id/:year/:metric_id?/:summary_view?",{templateUrl:"/partials/dashboards/metric_dashboard_annual.html",controller:"DashboardDetailsCtrl"}),e.when("/initiative_dashboard_details/:dashboard_id/:year/:metric_id?",{templateUrl:"/partials/dashboards/initiative_dashboard_annual.html",controller:"DashboardDetailsCtrl"}),e.when("/discussion_points/",{templateUrl:"/partials/dashboards/discussion_points_list.html",controller:"DiscussionPointsCtrl"}),e.when("/discussion_point_details/:metricid/:dashboardid/:month/:year",{templateUrl:"/partials/dashboards/discussion_point_details.html",controller:"DiscussionPointDetailsCtrl"}),e.when("/defects/:metricid/:dashboardid/:viewtype",{templateUrl:"/partials/dashboards/defects.html",controller:"DefectsCtrl"}),e.when("/metric_details/:metricid/:dashboardid/:year",{templateUrl:"/partials/dashboards/metric_details.html",controller:"MetricDetailsCtrl"}),e.when("/initiative_details/:metricid",{templateUrl:"/partials/dashboards/initiative_details.html",controller:"InitiativeDetailCtrl"}),e.when("/metrics/",{templateUrl:"/partials/dashboards/metrics_list.html",controller:"MetricsCtrl"}),e.when("/metric_edit/:metric_id",{templateUrl:"/partials/dashboards/metric_input.html",controller:"MetricEditCtrl"}),e.when("/metric_measurements/:metric_id/:year",{templateUrl:"/partials/dashboards/metric_measurements_input.html",controller:"MetricMeasurementsCtrl"}),e.when("/metric_meta_data/:metric_id",{templateUrl:"/partials/dashboards/metric_meta_data_input.html",controller:"MetricMetaDataCtrl"}),e.when("/discussion_point_input/:discussion_point_id?",{templateUrl:"/partials/dashboards/discussion_point_input.html",controller:"DiscussionPointInputCtrl"}),e.when("/metric_add/",{templateUrl:"/partials/dashboards/metric_input.html",controller:"MetricEditCtrl"}),e.when("/chart_line_defect/:metric_id/:tv_view?",{templateUrl:"/partials/dashboards/chartLineDefect.html",controller:"ChartLineDefectCtrl"}),e.when("/product_scorecards/",{templateUrl:"/partials/dashboards/product_scorecards.html",controller:"BlankCtrl"}),e.when("/dashboards",{templateUrl:"/partials/dashboards/dashboards.html",controller:"DashboardsCtrl"}),e.when("/dashboard_config/:dashboardid",{templateUrl:"/partials/dashboards/dashboard_config.html",controller:"DashboardConfigCtrl"}),e.when("/commitments/:metricid/:month/:year",{templateUrl:"/partials/dashboards/commitments.html",controller:"CommitmentsCtrl"}),e.when("/initiative_dashboard/:dashboard_id/:start_year/:start_month/:total_months/:metric_id?/:show_percent_complete?",{templateUrl:"/partials/dashboards/initiative_dashboard.html",controller:"InitiativeDashboardCtrl"}),e.when("/upload_file/",{templateUrl:"/partials/file_upload.html",controller:"FileUploadCtrl"}),e.when("/roadmap_list/",{templateUrl:"/partials/roadmap_list.html",controller:"RoadmapListCtrl"}),e.when("/resourceplan_list/",{templateUrl:"/partials/resourceplan_list.html",controller:"ResourcePlanListCtrl"}),e.when("/initiative_update_request_list/:dashboard_id/:month/:year",{templateUrl:"/partials/dashboards/initiative_update_request_list.html",controller:"InitiativeUpdateRequestListCtrl"}),e.when("/initiative_update_request/:metric_id/:initiative_update_request_id?",{templateUrl:"/partials/dashboards/initiative_update_request_input.html",controller:"InitiativeUpdateRequestCtrl"}),e.when("/splitscreens/",{templateUrl:"/partials/splitscreens.html",controller:"SplitScreensCtrl"}),e.when("/splitscreen_input/:channel_splitscreen_id?",{templateUrl:"/partials/splitscreen_input.html",controller:"SplitScreenInputCtrl"}),e.otherwise({redirectTo:"/home"}),t.html5Mode({enabled:!0,requireBase:!1})}]);var app=angular.module("opsVisionApp");app.controller("AdminHomeCtrl",["$scope","$location","$cookies","$cookieStore","$routeParams",function(e,t,a,r,i){r.put("ADMIN","TRUE"),e.revertadmin=i.revertadmin,"1"===e.revertadmin&&r.remove("ADMIN"),t.path("/")}]);var app=angular.module("opsVisionApp");app.controller("BlankCtrl",["$scope",function(e){}]);var app=angular.module("opsVisionApp");app.controller("BroadcastListCtrl",["$scope","BackendServiceBroadcastList","$q","$http",function(e,t,a,r){e.viewModel={},e.viewModel.$back=function(){window.history.back()},e.viewModel.channels=[],t.getChannels().then(function(t){e.viewModel.channels=t.data})}]).factory("BackendServiceBroadcastList",["$http","$q",function(e,t){function a(){var t=e({method:"GET",url:i});return r(t)}function r(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var i="/api/channels/";return{getChannels:a}}]);var app=angular.module("opsVisionApp");app.controller("ChannelDetailsCtrl",["$scope","BackendServiceChannelDetails","$q","$http","$routeParams",function(e,t,a,r,i){e.viewModel={},e.viewModel.myExternalScope=e,e.viewModel.$back=function(){window.history.back()},e.viewModel.selectedRows=[],e.gridOptions={enableRowSelection:!0,enableSelectAll:!0,multiSelect:!0,enableCellEditOnFocus:!0,selectionRowHeaderWidth:30,rowHeight:30};var n=function(){t.getChannelDetails(i.channelid).then(function(t){e.gridOptions.data=t.data,d(t.data.length)}),e.viewModel.selectedRows.length=0};e.viewModel.deleteRows=function(){for(var a=e.viewModel.selectedRows.length-1;a>=0;a--)t.deleteChannelDetails(e.viewModel.selectedRows[a]).then(function(e){n()})},e.viewModel.addNewRow=function(){e.gridOptions.data.push({channel_id:i.channelid,channel_cd:null,description:null,updated_by:null}),d(e.gridOptions.data.length)},e.selectedUrlDD=null,e.url_dds=[],t.getUrlsDD().then(function(t){e.url_dds=t.data}),e.gridOptions.columnDefs=[{name:"url_id",displayName:"URL Description",enableCellEdit:!0,cellTemplate:"../partials/urldd_external.html",width:"30%"},{name:"url_string",displayName:"Url",enableCellEdit:!1,width:"30%"},{name:"priority",displayName:"priority",enableCellEdit:!0,type:"number",width:"8%"},{name:"display_duration_sec",displayName:"Display Seconds",enableCellEdit:!0,type:"number",width:"12%"},{name:"updated_by",displayName:"Updated By",enableCellEdit:!0,width:"10%"},{name:"updated",displayName:"Updated On",enableCellEdit:!1,width:"10%"},{name:"id",visible:!1},{name:"channel_id",visible:!1}],e.saveRow=function(r){var i=a.defer();e.gridApi.rowEdit.setSavePromise(e.gridApi.grid,r,i.promise),void 0===r.id?t.createChannelDetails(r):t.updateChannelDetails(r.id,r.url_id,r),n(),e.url_id=r.url_id,i.resolve()},e.gridOptions.onRegisterApi=function(t){e.gridApi=t,t.rowEdit.on.saveRow(e,e.saveRow),t.selection.on.rowSelectionChanged(e,function(t){t.isSelected?e.viewModel.selectedRows.push(t.entity.id):e.viewModel.selectedRows.splice(e.viewModel.selectedRows.indexOf(t.entity.id),1)})},n();var d=function(e){var t=60,a=30*e+t;angular.element(document.getElementsByClassName("gridStyle")[0]).css("height",a+"px")}}]).factory("BackendServiceChannelDetails",["$http","$q",function(e,t){function a(t){var a=e({method:"GET",url:s+t});return o(a)}function r(){var t=e({method:"GET",url:"/api/urls_dd/"});return o(t)}function i(t){var a=e({method:"POST",data:t,url:s});return o(a)}function n(t,a,r){var i=e({method:"PUT",data:r,url:s+t+"/"+a});return o(i)}function d(t){var a=e({method:"DELETE",url:s+t});return o(a)}function o(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var s="/api/channel_details/";return{getChannelDetails:a,createChannelDetails:i,updateChannelDetails:n,deleteChannelDetails:d,getUrlsDD:r}}]);var app=angular.module("opsVisionApp");app.controller("ChannelsCtrl",["$scope","BackendServiceChannel","$q","$http",function(e,t,a,r){e.viewModel={},e.viewModel.$back=function(){window.history.back()},e.viewModel.selectedRows=[],e.gridOptions={enableRowSelection:!0,enableSelectAll:!0,enableCellEditOnFocus:!0,selectionRowHeaderWidth:30,rowHeight:30},e.viewModel.myExternalScope=e;var i=function(){t.getChannels().then(function(t){e.gridOptions.data=t.data,n(t.data.length)}),e.viewModel.selectedRows.length=0};e.viewModel.deleteRows=function(){for(var a=e.viewModel.selectedRows.length-1;a>=0;a--)t.deleteChannel(e.viewModel.selectedRows[a]).then(function(e){i()})},e.viewModel.addNewRow=function(){e.gridOptions.data.push({channel_cd:null,description:null,updated_by:null}),n(e.gridOptions.data.length)},e.gridOptions.columnDefs=[{name:"channel_id",displayName:"Channel Id",enableCellEdit:!1,width:"5%"},{name:"channel_cd",displayName:"Channel Code",enableCellEdit:!0,width:"10%"},{name:"description",displayName:"Description",enableCellEdit:!0,width:"25%"},{name:"updated_by",displayName:"Updated By",enableCellEdit:!0,width:"10%"},{name:"updated",displayName:"Updated On",enableCellEdit:!1,width:"10%"},{name:"Add_Content",displayName:"Action",cellTemplate:'<div style="text-align:center"> <a   class="btn btn-xs btn-primary" type="button" href="/channel_details/{{row.entity.channel_id}}">Add Content</a> &nbsp; <a   class="btn btn-xs btn-success" type="button" href="/broadcasts/{{row.entity.channel_cd}}" target="_blank">Watch</a></div>',enableCellEdit:!1,width:"20%"}],e.gridOptions.multiSelect=!0,e.saveRow=function(r){var n=a.defer();e.gridApi.rowEdit.setSavePromise(e.gridApi.grid,r,n.promise),void 0===r.channel_id?t.createChannel(r):t.updateChannel(r.channel_id,r),i(),n.resolve()},e.gridOptions.onRegisterApi=function(t){e.gridApi=t,t.rowEdit.on.saveRow(e,e.saveRow),t.selection.on.rowSelectionChanged(e,function(t){t.isSelected?e.viewModel.selectedRows.push(t.entity.channel_id):e.viewModel.selectedRows.splice(e.viewModel.selectedRows.indexOf(t.entity.channel_id),1)})},i();var n=function(e){var t=60,a=30*e+t;angular.element(document.getElementsByClassName("gridStyle")[0]).css("height",a+"px")}}]).factory("BackendServiceChannel",["$http","$q",function(e,t){function a(){var t=e({method:"GET",url:s});return o(t)}function r(){var t=e({method:"GET",url:"/api/urls_dd/"});return o(t)}function i(t){var a=e({method:"POST",data:t,url:s});return o(a)}function n(t,a){var r=e({method:"PUT",data:a,url:s+t});return o(r)}function d(t){var a=e({method:"DELETE",url:s+t});return o(a)}function o(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var s="/api/channels/";return{getChannels:a,createChannel:i,updateChannel:n,deleteChannel:d,getUrlsDD:r}}]);var app=angular.module("opsVisionApp");app.controller("ChartLineDefectCtrl",["$scope","BackendServiceMetricTrend","$q","$http","$routeParams",function(e,t,a,r,i){e.viewModel={},e.viewModel.$back=function(){window.history.back()},e.viewModel.metric_id=i.metric_id,e.viewModel.tv_view=!1;var n=i.tv_view;"1"===n&&(e.viewModel.tv_view=!0);var d={labels:[],datasets:[{label:"Green",fill:!1,borderColor:"rgba(55,255,51,1)",data:[]},{label:"Yellow",borderColor:"rgba(255,255,0,1)",fill:!1,data:[]},{label:"Red",borderColor:"rgba(255,0,0,1)",fill:!1,data:[]},{label:"Defect Count",fill:!0,fillColor:"rgba(151,187,205,0.2)",data:[]}]},o=[],s=[],l=[],c=[],m=[],u="";e.viewModel.mtdmeasure="GRAY",e.viewModel.mtdcount="N/A",t.getMetricTrend(e.viewModel.metric_id).then(function(t){for(var a=0;a<t.data.length;a++)o.push(t.data[a].month+"/"+t.data[a].day),s.push(t.data[a].count),l.push(t.data[a].threshold_green_high_normal),c.push(t.data[a].threshold_yellow_high_normal),m.push(t.data[a].threshold_red_high_normal),u=t.data[a].label,a==t.data.length-1&&(e.viewModel.mtdmeasure=t.data[a].measurement,e.viewModel.mtdcount=t.data[a].count);d.labels=o,d.datasets[0].data=l,d.datasets[1].data=c,d.datasets[2].data=m,d.datasets[3].data=s,e.viewModel.metric_label=u,e.viewModel.data=d;var r=document.getElementById("line-chart");new Chart(r,{type:"line",data:d,options:{responsive:!0,legend:{display:!1},scales:{yAxes:[{ticks:{fontSize:20}}],xAxes:[{ticks:{fontSize:20}}]},scaleFontStyle:"bold",scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0}})})}]).factory("BackendServiceMetricTrend",["$http","$q",function(e,t){function a(t){var a=e({method:"GET",url:i+t});return r(a)}function r(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var i="/api/metric_trend/";return{getMetricTrend:a}}]);var app=angular.module("opsVisionApp");app.controller("CommitmentsCtrl",["$scope","BackendServiceCommitments","$q","$http","$routeParams","$filter",function(e,t,a,r,i,n){e.$back=function(){window.history.back()},e.rowCollection=[],e.project="Loading",e.area="Loading",e.label="Loading",e.metric_value_mtd="Loading",e.metric_measurement_mtd="Loading",e.metric_value_ytd="Loading",e.metric_measurement_ytd="Loading",e.display_type="Loading",e.bugcount="Loading",e.lastUpdatedDt="Loading",e.committedDeliveredCount="Loading",e.notCommittedDeliveredCount="Loading",e.missedCommitmentsCount="Loading",e.year=i.year,e.month=i.month,e.metric_id=i.metricid,Number(i.month)-1===0?(e.prev_month=12,e.prev_year=Number(i.year)-1):(e.prev_month=Number(i.month)-1,e.prev_year=Number(i.year)),Number(i.month)+1===13?(e.next_month=1,e.next_year=Number(i.year)+1):(e.next_month=Number(i.month)+1,e.next_year=Number(i.year));var d=new Date(e.prev_year,e.prev_month-1,0),o=new Date(2015,5,0);e.allow_previous_rollback="TRUE",d<o&&(e.allow_previous_rollback="FALSE");var s=["January","February","March","April","May","June","July","August","September","October","November","December"];e.monthName=s[i.month-1],t.getCommitments(i.metricid,e.month,e.year).then(function(a){for(var r=0,n=0,d=0,o=0;o<a.data.length;o++)e.rowCollection[o]=a.data[o],"Committed and Delivered"!==a.data[o].commitResult&&"Committed and Delivered (Manual Override)"!==a.data[o].commitResult||(r+=1),"Delivered without Commitment"===a.data[o].commitResult&&(n+=1),"Missed Commitment"===a.data[o].commitResult&&(d+=1);e.committedDeliveredCount=r,e.notCommittedDeliveredCount=n,e.missedCommitmentsCount=d,e.bugcount=a.data.length,t.getMetricDetails(i.metricid,e.month,e.year).then(function(t){1===t.data.length&&(e.project=t.data[0].project,e.area=t.data[0].area,e.label=t.data[0].label,e.metric_value_mtd=t.data[0].metric_value_mtd,e.metric_measurement_mtd=t.data[0].metric_measurement_mtd,e.metric_value_ytd=t.data[0].metric_value_ytd,e.metric_measurement_ytd=t.data[0].metric_measurement_ytd,e.display_type=t.data[0].display_type,e.lastUpdatedDt=t.data[0].LastUpdatedProdDefectDt,e.LastUpdatedProdCommitDt=t.data[0].LastUpdatedProdCommitDt)})}),e.displayedCollection=[].concat(e.rowCollection)}]).factory("BackendServiceCommitments",["$http","$q",function(e,t){function a(t,a,r){var d=e({method:"GET",url:n+"/commitments/"+t+"/"+a+"/"+r});return i(d)}function r(t,a,r){var d=e({method:"GET",url:n+"/metric_details/"+t+"/"+a+"/"+r});return i(d)}function i(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var n="/api";return{getCommitments:a,getMetricDetails:r}}]);var app=angular.module("opsVisionApp");app.controller("DashboardDetailsCtrl",["$scope","BackendServiceDashboardDetails","$q","$http","$cookies","$cookieStore","$routeParams",function(e,t,a,r,i,n,d){e.admin="FALSE";var o=n.get("ADMIN");"TRUE"===o&&(e.isAdmin="TRUE"),e.metrics=[],e.year=d.year,e.dashboard_id=d.dashboard_id,e.dashboard_description="",e.metric_id=d.metric_id,e.$back=function(){window.history.back()},e.month_display=12;var s=new Date,l=s.getMonth()+1;e.mr_month=s.getMonth()+1,e.summary_view=d.summary_view,"MRM"===e.summary_view?e.month_display=l-1:"MTD"===e.summary_view?e.month_display=l:"MRMLO"===e.summary_view&&(e.month_display=l-2);var c="3px dotted grey";t.getDashboardDetails(d.dashboard_id,d.year,d.metric_id).then(function(t){e.metrics=t.data;for(var a=0;a<e.metrics.length;a++)if(0==a&&(e.dashboard_description=e.metrics[a].dashboard_description),e.metrics[a].initiative_meta_data_id){var r=0,i=0,n=0,o=0,s=0,l=0,m=0,u=0,p=0,_=0,h=0,v=0,f="Plan Start",w="Plan Launch",y="Actual Start",g="Actual Launch",b="Target Launch";if(e.metrics[a].plan_start){var M=new Date(e.metrics[a].plan_start);n=M.getUTCMonth()+1,u=M.getUTCFullYear()}if(e.metrics[a].actual_start){var D=new Date(e.metrics[a].actual_start);o=D.getUTCMonth()+1,p=D.getUTCFullYear()}if(r=Math.max(n,o),e.metrics[a].plan_finish){var S=new Date(e.metrics[a].plan_finish);s=S.getUTCMonth()+1,_=S.getUTCFullYear()}if(e.metrics[a].actual_finish){var C=new Date(e.metrics[a].actual_finish);l=C.getUTCMonth()+1,h=C.getUTCFullYear()}if(e.metrics[a].target_finish){var E=new Date(e.metrics[a].target_finish);m=E.getUTCMonth()+1,v=E.getUTCFullYear()}i=l>0?l:m>0?m:s;for(var R=1;R<13;R++)1===R&&(console.log(v),console.log(d.year),v==d.year&&console.log("happy"),n===R&&u==e.year&&(e.metrics[a].janPlanStart=f),o===R&&p==e.year&&(e.metrics[a].janActualStart=y),s===R&&_==e.year&&(e.metrics[a].janPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].janActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].janTargetLaunch=b),r===R&&(e.metrics[a].janBorderTop=c,e.metrics[a].janBorderBottom=c,e.metrics[a].janBorderLeft=c),i===R&&(e.metrics[a].janBorderTop=c,e.metrics[a].janBorderBottom=c,e.metrics[a].janBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].janBorderTop=c,e.metrics[a].janBorderBottom=c)),2===R&&(n===R&&u==e.year&&(e.metrics[a].febPlanStart=f),o===R&&p==e.year&&(e.metrics[a].febActualStart=y),s===R&&_==e.year&&(e.metrics[a].febPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].febActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].febTargetLaunch=b),r===R&&(e.metrics[a].febBorderTop=c,e.metrics[a].febBorderBottom=c,e.metrics[a].febBorderLeft=c),i===R&&(e.metrics[a].febBorderTop=c,e.metrics[a].febBorderBottom=c,e.metrics[a].febBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].febBorderTop=c,e.metrics[a].febBorderBottom=c)),3===R&&(n===R&&u==e.year&&(e.metrics[a].marPlanStart=f),o===R&&p==e.year&&(e.metrics[a].marActualStart=y),s===R&&_==e.year&&(e.metrics[a].marPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].marActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].marTargetLaunch=b),r===R&&(e.metrics[a].marBorderTop=c,e.metrics[a].marBorderBottom=c,e.metrics[a].marBorderLeft=c),i===R&&(e.metrics[a].marBorderTop=c,e.metrics[a].marBorderBottom=c,e.metrics[a].marBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].marBorderTop=c,e.metrics[a].marBorderBottom=c)),4===R&&(n===R&&u==e.year&&(e.metrics[a].aprPlanStart=f),o===R&&p==e.year&&(e.metrics[a].aprActualStart=y),s===R&&_==e.year&&(e.metrics[a].aprPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].aprActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].aprTargetLaunch=b),r===R&&(e.metrics[a].aprBorderTop=c,e.metrics[a].aprBorderBottom=c,e.metrics[a].aprBorderLeft=c),i===R&&(e.metrics[a].aprBorderTop=c,e.metrics[a].aprBorderBottom=c,e.metrics[a].aprBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].aprBorderTop=c,e.metrics[a].aprBorderBottom=c)),5===R&&(n===R&&u==e.year&&(e.metrics[a].mayPlanStart=f),o===R&&p==e.year&&(e.metrics[a].mayActualStart=y),s===R&&_==e.year&&(e.metrics[a].mayPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].mayActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].mayTargetLaunch=b),r===R&&(e.metrics[a].mayBorderTop=c,e.metrics[a].mayBorderBottom=c,e.metrics[a].mayBorderLeft=c),i===R&&(e.metrics[a].mayBorderTop=c,e.metrics[a].mayBorderBottom=c,e.metrics[a].mayBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].mayBorderTop=c,e.metrics[a].mayBorderBottom=c)),6===R&&(n===R&&u==e.year&&(e.metrics[a].junPlanStart=f),o===R&&p==e.year&&(e.metrics[a].junActualStart=y),s===R&&_==e.year&&(e.metrics[a].junPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].junActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].junTargetLaunch=b),r===R&&(e.metrics[a].junBorderTop=c,e.metrics[a].junBorderBottom=c,e.metrics[a].junBorderLeft=c),i===R&&(e.metrics[a].junBorderTop=c,e.metrics[a].junBorderBottom=c,e.metrics[a].junBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].junBorderTop=c,e.metrics[a].junBorderBottom=c)),7===R&&(n===R&&u==e.year&&(e.metrics[a].julPlanStart=f),o===R&&p==e.year&&(e.metrics[a].julActualStart=y),s===R&&_==e.year&&(e.metrics[a].julPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].julActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].julTargetLaunch=b),r===R&&(e.metrics[a].julBorderTop=c,e.metrics[a].julBorderBottom=c,e.metrics[a].julBorderLeft=c),i===R&&(e.metrics[a].julBorderTop=c,e.metrics[a].julBorderBottom=c,e.metrics[a].julBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].julBorderTop=c,e.metrics[a].julBorderBottom=c)),8===R&&(n===R&&u==e.year&&(e.metrics[a].augPlanStart=f),o===R&&p==e.year&&(e.metrics[a].augActualStart=y),s===R&&_==e.year&&(e.metrics[a].augPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].augActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].augTargetLaunch=b),r===R&&(e.metrics[a].augBorderTop=c,e.metrics[a].augBorderBottom=c,e.metrics[a].augBorderLeft=c),i===R&&(e.metrics[a].augBorderTop=c,e.metrics[a].augBorderBottom=c,e.metrics[a].augBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].augBorderTop=c,e.metrics[a].augBorderBottom=c)),9===R&&(n===R&&u==e.year&&(e.metrics[a].sepPlanStart=f),o===R&&p==e.year&&(e.metrics[a].sepActualStart=y),s===R&&_==e.year&&(e.metrics[a].sepPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].sepActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].sepTargetLaunch=b),r===R&&(e.metrics[a].sepBorderTop=c,e.metrics[a].sepBorderBottom=c,e.metrics[a].sepBorderLeft=c),i===R&&(e.metrics[a].sepBorderTop=c,e.metrics[a].sepBorderBottom=c,e.metrics[a].sepBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].sepBorderTop=c,e.metrics[a].sepBorderBottom=c)),10===R&&(n===R&&u==e.year&&(e.metrics[a].octPlanStart=f),o===R&&p==e.year&&(e.metrics[a].octActualStart=y),s===R&&_==e.year&&(e.metrics[a].octPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].octActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].octTargetLaunch=b),r===R&&(e.metrics[a].octBorderTop=c,e.metrics[a].octBorderBottom=c,e.metrics[a].octBorderLeft=c),i===R&&(e.metrics[a].octBorderTop=c,e.metrics[a].octBorderBottom=c,e.metrics[a].octBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].octBorderTop=c,e.metrics[a].octBorderBottom=c)),11===R&&(n===R&&u==e.year&&(e.metrics[a].novPlanStart=f),o===R&&p==e.year&&(e.metrics[a].novActualStart=y),s===R&&_==e.year&&(e.metrics[a].novPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].novActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].novTargetLaunch=b),r===R&&(e.metrics[a].novBorderTop=c,e.metrics[a].novBorderBottom=c,e.metrics[a].novBorderLeft=c),i===R&&(e.metrics[a].novBorderTop=c,e.metrics[a].novBorderBottom=c,e.metrics[a].novBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].novBorderTop=c,e.metrics[a].novBorderBottom=c)),12===R&&(n===R&&u==e.year&&(e.metrics[a].decPlanStart=f),o===R&&p==e.year&&(e.metrics[a].decActualStart=y),s===R&&_==e.year&&(e.metrics[a].decPlanLaunch=w),l===R&&h==e.year&&(e.metrics[a].decActualLaunch=g),m===R&&v==e.year&&(e.metrics[a].decTargetLaunch=b),r===R&&(e.metrics[a].decBorderTop=c,e.metrics[a].decBorderBottom=c,e.metrics[a].decBorderLeft=c),i===R&&(e.metrics[a].decBorderTop=c,e.metrics[a].decBorderBottom=c,e.metrics[a].decBorderRight=c),R>r&&R<i&&r>0&&(e.metrics[a].decBorderTop=c,e.metrics[a].decBorderBottom=c))}})}]).factory("BackendServiceDashboardDetails",["$http","$q",function(e,t){function a(t,a,n){var d=e({method:"GET",url:i+t+"/"+a+"/"+n});return r(d)}function r(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var i="/api/dashboard_details/";return{getDashboardDetails:a}}]);var app=angular.module("opsVisionApp");app.controller("DashboardsCtrl",["$scope","BackendServiceDashboards","$q","$http",function(e,t,a,r){e.$back=function(){window.history.back()},e.selectedRows=[],e.gridOptions={enableRowSelection:!0,enableSelectAll:!0,enableCellEditOnFocus:!0,selectionRowHeaderWidth:30,rowHeight:30},e.myExternalScope=e;var i=function(){t.getDashboards().then(function(t){e.gridOptions.data=t.data,n(t.data.length)}),e.selectedRows.length=0};e.deleteRows=function(){for(var a=e.selectedRows.length-1;a>=0;a--)t.deleteDashboard(e.selectedRows[a]).then(function(e){i()})},e.addNewRow=function(){e.gridOptions.data.push({dashboard_cd:null,description:null,updated_by:null}),n(e.gridOptions.data.length)},e.selectedDashboardTypeDD=null,e.dashboardtype_dds=[],t.getDashboardTypeDD().then(function(t){e.dashboardtype_dds=t.data}),e.gridOptions.columnDefs=[{name:"dashboard_id",displayName:"Dashboard Id",enableCellEdit:!1,width:"5%"},{name:"dashboard_cd",displayName:"Dashboard Code",enableCellEdit:!0,width:"10%"},{name:"description",displayName:"Description",enableCellEdit:!0,width:"20%"},{name:"dashboard_type_id",displayName:"Dashboard Type",enableCellEdit:!0,cellTemplate:"../partials/dashboards/dashboardtypedd_external.html",width:"15%"},{name:"month_default",enableCellEdit:!0,displayName:"Month Default",editableCellTemplate:"ui-grid/dropdownEditor",width:"5%",cellFilter:"mapMonth",editDropdownValueLabel:"month",editDropdownOptionsArray:[{id:1,month:"1"},{id:2,month:"2"},{id:3,month:"3"},{id:4,month:"4"},{id:5,month:"5"},{id:6,month:"6"},{id:7,month:"7"},{id:8,month:"8"},{id:9,month:"9"},{id:10,month:"10"},{id:11,month:"11"},{id:12,month:"12"}]},{name:"year_default",enableCellEdit:!0,displayName:"Year Default",editableCellTemplate:"ui-grid/dropdownEditor",width:"5%",cellFilter:"mapYear",editDropdownValueLabel:"year",editDropdownOptionsArray:[{id:2013,year:"2013"},{id:2014,year:"2014"},{id:2015,year:"2015"},{id:2016,year:"2016"},{id:2017,year:"2017"},{id:2018,year:"2018"}]},{name:"updated_by",enableCellEdit:!0,displayName:"Updated By",width:"5%"},{name:"updated",displayName:"Updated On",enableCellEdit:!1,width:"5%"},{name:"Add_Metrics",displayName:"Action",cellTemplate:'<div style="text-align:center"> <a   class="btn btn-xs btn-primary" type="button" href="/dashboard_config/{{row.entity.dashboard_id}}">Add Metrics</a> &nbsp; <a   class="btn btn-xs btn-success" type="button" href="/dashboard_details/{{row.entity.dashboard_id}}/{{row.entity.year_default}}" target="_blank">View Summary</a> &nbsp; <a   class="btn btn-xs btn-success" type="button" href="/initiative_dashboard/{{row.entity.dashboard_id}}/{{row.entity.year_default}}/{{row.entity.month_default}}/12" target="_blank">View Details</a></div>',enableCellEdit:!1,width:"20%"}],e.gridOptions.multiSelect=!0,e.saveRow=function(r){var n=a.defer();e.gridApi.rowEdit.setSavePromise(e.gridApi.grid,r,n.promise),void 0===r.dashboard_id?t.createDashboard(r):t.updateDashboard(r.dashboard_id,r),n.resolve(),i()},e.gridOptions.onRegisterApi=function(t){e.gridApi=t,t.rowEdit.on.saveRow(e,e.saveRow),t.selection.on.rowSelectionChanged(e,function(t){t.isSelected?e.selectedRows.push(t.entity.dashboard_id):e.selectedRows.splice(e.selectedRows.indexOf(t.entity.dashboard_id),1)})},i();var n=function(e){var t=60,a=30*e+t;angular.element(document.getElementsByClassName("gridStyle")[0]).css("height",a+"px")}}]).factory("BackendServiceDashboards",["$http","$q",function(e,t){function a(){var t=e({method:"GET",url:s});return o(t)}function r(t){var a=e({method:"POST",data:t,url:s});return o(a)}function i(t,a){var r=e({method:"PUT",data:a,url:s+t});return o(r)}function n(t){var a=e({method:"DELETE",url:s+t});return o(a)}function d(){var t=e({method:"GET",url:"/api/dashboard_type_dd/"});return o(t)}function o(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var s="/api/dashboards/";return{getDashboards:a,createDashboard:r,updateDashboard:i,deleteDashboard:n,getDashboardTypeDD:d}}]);var app=angular.module("opsVisionApp");app.controller("DashboardConfigCtrl",["$scope","BackendServiceDashboardConfig","$q","$http","$routeParams",function(e,t,a,r,i){e.myExternalScope=e,e.$back=function(){window.history.back()},e.selectedRows=[],e.gridOptions={enableRowSelection:!0,enableSelectAll:!0,multiSelect:!0,enableCellEditOnFocus:!0,selectionRowHeaderWidth:30,rowHeight:30};var n=function(){t.getDashboardConfig(i.dashboardid).then(function(t){e.gridOptions.data=t.data,d(t.data.length)}),e.selectedRows.length=0};e.deleteRows=function(){for(var a=e.selectedRows.length-1;a>=0;a--)t.deleteDashboardConfig(e.selectedRows[a]).then(function(e){n()})},e.addNewRow=function(){e.gridOptions.data.push({dashboard_id:i.dashboardid,dashboard_cd:null,description:null,updated_by:null}),d(e.gridOptions.data.length)},e.selectedMetricDD=null,e.metrics_dds=[],t.getMetricsDD().then(function(t){e.metrics_dds=t.data}),e.gridOptions.columnDefs=[{name:"metric_id",displayName:"Metric Id",enableCellEdit:!1,width:"10%"},{name:"metric_id",displayName:"Metric Description",cellTemplate:"../partials/metricdd_external.html",width:"15%"},{name:"definition",displayName:"Metric Definition",enableCellEdit:!1,width:"40%"},{name:"sequence",displayName:"Sequence",type:"number",width:"8%"},{name:"updated_by",displayName:"Updated By",width:"10%"},{name:"updated",displayName:"Updated On",enableCellEdit:!1,width:"10%"},{name:"dashboard_id",visible:!1},{name:"id",visible:!1}],e.saveRow=function(r){var i=a.defer();e.gridApi.rowEdit.setSavePromise(e.gridApi.grid,r,i.promise),void 0===r.id||null===r.id?t.createDashboardConfig(r):t.updateDashboardConfig(r.id,r),n(),e.metric_id=r.metric_id,i.resolve()},e.gridOptions.onRegisterApi=function(t){e.gridApi=t,t.rowEdit.on.saveRow(e,e.saveRow),t.selection.on.rowSelectionChanged(e,function(t){t.isSelected?e.selectedRows.push(t.entity.id):e.selectedRows.splice(e.selectedRows.indexOf(t.entity.id),1)})},n();var d=function(e){var t=60,a=30*e+t;angular.element(document.getElementsByClassName("gridStyle")[0]).css("height",a+"px")}}]).factory("BackendServiceDashboardConfig",["$http","$q",function(e,t){function a(t){var a=e({method:"GET",url:s+t});return o(a)}function r(){var t=e({method:"GET",url:"/api/metrics_dd/"});return o(t)}function i(t){var a=e({method:"POST",data:t,url:s});return o(a)}function n(t,a){var r=e({method:"PUT",data:a,url:s+t});return o(r)}function d(t){var a=e({method:"DELETE",url:s+t});return o(a)}function o(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var s="/api/dashboard_config/";return{getDashboardConfig:a,createDashboardConfig:i,updateDashboardConfig:n,deleteDashboardConfig:d,getMetricsDD:r}}]);var app=angular.module("opsVisionApp");app.controller("DefectsCtrl",["$scope","BackendServiceDefects","$q","$http","$routeParams","$filter",function(e,t,a,r,i,n){e.viewModel={},e.$back=function(){window.history.back()},e.viewModel.rowCollection=[],e.viewModel.project="Error",e.viewModel.area="Error",e.viewModel.priority="Error",e.viewModel.label="Error",e.viewModel.metric_value_mtd="Error",e.viewModel.metric_measurement_mtd="Error",e.viewModel.metric_value_ytd="Error",e.viewModel.metric_measurement_ytd="Error",e.viewModel.display_type="Error",e.viewModel.bugcount="Error",e.viewModel.bugcountMetricToday="Error",e.viewModel.bugcountMetricYest="Error",e.viewModel.lastUpdatedDt="Error";var d=new Date,o=("0"+(d.getMonth()+1)).slice(-2),s=d.getFullYear();e.viewModel.year=s,e.viewModel.month=o,e.viewModel.dashboardid=i.dashboardid,e.viewModel.metricId=i.metricid,t.getDefects(i.metricid,i.viewtype).then(function(a){for(var r=0;r<a.data.length;r++)e.viewModel.rowCollection[r]=a.data[r];e.viewModel.bugcount=a.data.length,t.getMetricDetails(i.metricid,o,s).then(function(t){
1===t.data.length&&(e.viewModel.project=t.data[0].project,e.viewModel.area=t.data[0].area,e.viewModel.priority=t.data[0].priority,e.viewModel.label=t.data[0].label,e.viewModel.metric_value_mtd=t.data[0].metric_value_mtd,e.viewModel.metric_measurement_mtd=t.data[0].metric_measurement_mtd,e.viewModel.metric_value_ytd=t.data[0].metric_value_ytd,e.viewModel.metric_measurement_ytd=t.data[0].metric_measurement_ytd,e.viewModel.display_type=t.data[0].display_type,e.viewModel.lastUpdatedDt=t.data[0].LastUpdatedProdDefectDt,e.viewModel.bugcountMetricToday=t.data[0].metricCountToday,e.viewModel.bugcountMetricYest=t.data[0].metricCountYest)})}),e.viewModel.displayedCollection=[].concat(e.viewModel.rowCollection)}]).factory("BackendServiceDefects",["$http","$q",function(e,t){function a(t,a){var r=e({method:"GET",url:n+"/defects/"+t+"/"+a});return i(r)}function r(t,a,r){var d=e({method:"GET",url:n+"/metric_details/"+t+"/"+a+"/"+r});return i(d)}function i(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var n="/api";return{getDefects:a,getMetricDetails:r}}]);var app=angular.module("opsVisionApp");app.controller("DiscussionPointDetailsCtrl",["$scope","BackendServiceDiscussionPointDetails","$q","$http","$routeParams",function(e,t,a,r,i){e.$back=function(){window.history.back()},e.channels=[],e.year=i.year,e.month=i.month,e.dashboardid=i.dashboardid,e.metricid=i.metricid,e.gridOptions={},e.metric_label="Error",e.metric_value_mtd="Error",e.metric_measurement_mtd="Error",e.metric_value_ytd="Error",e.metric_measurement_ytd="Error",e.display_type="Error",e.discussion_point="Error",e.discussion_point_created_by="Error",e.$back=function(){window.history.back()},t.getDiscussionPoint(e.metricid,e.month,e.year).then(function(t){1===t.data.length&&(e.discussionpoint=t.data[0].discussion_point_detail,e.metric_label=t.data[0].label,e.metric_value_mtd=t.data[0].metric_value_mtd,e.metric_measurement_mtd=t.data[0].metric_measurement_mtd,e.metric_value_ytd=t.data[0].metric_value_ytd,e.metric_measurement_ytd=t.data[0].metric_measurement_ytd,e.display_type=t.data[0].display_type,e.discussion_point_created_by=t.data[0].discussion_point_created_by)})}]).factory("BackendServiceDiscussionPointDetails",["$http","$q",function(e,t){function a(t,a,n){var d=e({method:"GET",url:i+t+"/"+a+"/"+n});return r(d)}function r(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var i="/api/metric_details/";return{getDiscussionPoint:a}}]);var app=angular.module("opsVisionApp");app.controller("DiscussionPointInputCtrl",["$scope","BackendServiceDiscussionPointInput","$q","$http","$routeParams",function(e,t,a,r,i){e.$back=function(){window.history.back()},e.discussion_point_id=i.discussion_point_id,e.discussion_point={},e.master={},e.previous_discussion_point_id=+i.discussion_point_id-1,e.next_discussion_point_id=+i.discussion_point_id+1,e.years=[{id:2014,name:"2014"},{id:2015,name:"2015"},{id:2016,name:"2016"},{id:2017,name:"2017"},{id:2018,name:"2018"},{id:2019,name:"2019"}],e.months=[{id:1,name:"Jan"},{id:2,name:"Feb"},{id:3,name:"Mar"},{id:4,name:"Apr"},{id:5,name:"May"},{id:6,name:"Jun"},{id:7,name:"Jul"},{id:8,name:"Aug"},{id:9,name:"Sep"},{id:10,name:"Oct"},{id:11,name:"Nov"},{id:12,name:"Dec"}],e.selectedMetricsDD=null,e.metrics_dds=[];var n=function(){e.discussion_point_id&&t.getDiscussionPoint(e.discussion_point_id).then(function(t){e.discussion_point.discussion_point_id=t.data[0].discussion_point_id,e.discussion_point.detail=t.data[0].detail,e.discussion_point.month=t.data[0].month,e.discussion_point.year=t.data[0].year,e.discussion_point.metric_id=t.data[0].metric_id,e.discussion_point.created_by=t.data[0].created_by,t.data[0].created&&(e.discussion_point.created=new Date(t.data[0].created)),e.discussion_point.updated_by=t.data[0].updated_by,t.data[0].updated&&(e.discussion_point.updated=new Date(t.data[0].updated)),e.master=angular.copy(e.discussion_point)}),t.getMetricsDD().then(function(t){e.metrics_dds=t.data})};e.discussion_point_id&&n(),e.submit=function(a){if(void 0===a.discussion_point_id)if(a.detail&&a.month&&a.year&&a.metric_id&&a.updated_by){t.createDiscussionPoint(a);var r=new Date,i=r.getFullYear()+"-"+(r.getMonth()+1)+"-"+r.getDate()+" "+r.getHours()+":"+r.getMinutes()+":"+r.getSeconds();e.error=null,e.success="SAVE SUCCESSFUL:  "+i}else e.success=null,e.error="ERROR:  Complete all REQUIRED Fields";else if(JSON.stringify(a)!=JSON.stringify(e.master)){t.updateDiscussionPoint(a.discussion_point_id,a);var r=new Date,i=r.getFullYear()+"-"+(r.getMonth()+1)+"-"+r.getDate()+" "+r.getHours()+":"+r.getMinutes()+":"+r.getSeconds();e.error=null,e.success="SAVE SUCCESSFUL:  "+i}else e.success=null,e.error="WARNING:  No Changes made to discussion_point";e.master=angular.copy(a)},n()}]).factory("BackendServiceDiscussionPointInput",["$http","$q",function(e,t){function a(t){var a=e({method:"GET",url:o+t});return d(a)}function r(){var t=e({method:"GET",url:"/api/metrics_dd/"});return d(t)}function i(t){var a=e({method:"POST",data:t,url:o});return d(a)}function n(t,a){var r=e({method:"PUT",data:a,url:o+t});return d(r)}function d(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var o="/api/discussion_points/";return{getDiscussionPoint:a,createDiscussionPoint:i,updateDiscussionPoint:n,getMetricsDD:r}}]);var app=angular.module("opsVisionApp");app.controller("DiscussionPointsCtrl",["$scope","BackendServiceDiscussionPoints","$q",function(e,t,a){e.myExternalScope=e,e.$back=function(){window.history.back()},e.selectedRows=[],e.gridOptions={enableRowSelection:!0,enableSelectAll:!0,enableCellEditOnFocus:!0,selectionRowHeaderWidth:30,rowHeight:30},e.gridOptions.multiSelect=!0;var r=function(){t.getDiscussionPoints().then(function(t){e.gridOptions.data=t.data,i(t.data.length)}),e.selectedRows.length=0};e.deleteRows=function(){for(var a=e.selectedRows.length-1;a>=0;a--)t.deleteDiscussionPoint(e.selectedRows[a]).then(function(e){r()})},e.detachRows=function(){for(var a=e.selectedRows.length-1;a>=0;a--)t.detachDiscussionPoint(e.selectedRows[a]).then(function(e){r()})},e.selectedMetricsDD=null,e.metrics_dds=[],t.getMetricsDD().then(function(t){e.metrics_dds=t.data}),e.gridOptions.columnDefs=[{name:"discussion_point_id",displayName:"Discussion Point Id",enableCellEdit:!1,width:"6%"},{name:"detail",displayName:"Discussion Point Detail",enableCellEdit:!1,width:"40%"},{name:"metric_id",displayName:"Metric Id",enableCellEdit:!1,width:"6%"},{name:"label",displayName:"Metric Description",enableCellEdit:!1,width:"15%"},{name:"month",displayName:"month",enableCellEdit:!1,width:"6%"},{name:"year",displayName:"year",enableCellEdit:!1,width:"6%"},{name:"updated_by",displayName:"Updated By",enableCellEdit:!1,width:"5%"},{name:"updated",displayName:"Updated On",enableCellEdit:!1,width:"5%"},{name:"Add_Content",displayName:"Action",cellTemplate:'<div style="text-align:center"> <a   class="btn btn-xs btn-primary" type="button" href="/discussion_point_input/{{row.entity.discussion_point_id}}">Edit</a> </div>',enableCellEdit:!1,width:"10%"}],e.gridOptions.multiSelect=!0,e.gridOptions.onRegisterApi=function(t){e.gridApi=t,t.rowEdit.on.saveRow(e,e.saveRow),t.selection.on.rowSelectionChanged(e,function(t){t.isSelected?e.selectedRows.push(t.entity.discussion_point_id):e.selectedRows.splice(e.selectedRows.indexOf(t.entity.discussion_point_id),1)})},r();var i=function(e){var t=60,a=30*e+t;angular.element(document.getElementsByClassName("gridStyle")[0]).css("height",a+"px")}}]).factory("BackendServiceDiscussionPoints",["$http","$q",function(e,t){function a(){var t=e({method:"GET",url:l});return s(t)}function r(){var t=e({method:"GET",url:"/api/metrics_dd/"});return s(t)}function i(t){var a=e({method:"POST",data:t,url:l});return s(a)}function n(t){var a=l+"detach/",r=e({method:"PUT",url:a+t});return s(r)}function d(t,a){var r=e({method:"PUT",data:a,url:l+t});return s(r)}function o(t){var a=e({method:"DELETE",url:l+t});return s(a)}function s(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var l="/api/discussion_points/";return{getDiscussionPoints:a,createDiscussionPoint:i,updateDiscussionPoint:d,detachDiscussionPoint:n,deleteDiscussionPoint:o,getMetricsDD:r}}]);var app=angular.module("opsVisionApp");app.controller("FileUploadCtrl",["$scope","BackendServiceFileUpload","$q","$http","$upload",function(e,t,a,r,i){e.$back=function(){window.history.back()},e.uploadFile=function(){e.fileSelected=function(t){t&&t.length&&(e.file=t[0]),i.upload({url:"/api/upload",file:e.file}).success(function(e){console.log(e,"uploaded")})}}}]).factory("BackendServiceFileUpload",["$http","$q",function(e,t){function a(){var t=e({method:"GET",url:i});return r(t)}function r(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var i="/api/channels/";return{getChannels:a}}]);var app=angular.module("opsVisionApp");app.controller("HomeCtrl",["$scope","$cookies","$cookieStore","$location",function(e,t,a,r){e.$back=function(){window.history.back()},e.viewModel={};var i=a.get("ADMIN");"TRUE"===i&&(e.viewModel.isAdmin="TRUE");var n=new Date;e.viewModel.current_year=n.getFullYear(),e.viewModel.current_month=n.getMonth()+1}]);var app=angular.module("opsVisionApp");app.controller("InitiativeDashboardCtrl",["$scope","BackendServiceInitiativeDashboard","$q","$http","$cookies","$cookieStore","$routeParams",function(e,t,a,r,i,n,d){function o(e){if(e instanceof Array)return!0;for(var t in S)if(!(t in e&&typeof e[t]==S[t]))return!1;return!0}function s(e){if("object"==typeof e){if(o(e)){for(var t=e.length,a=new Array(t),r=0;r<t;r++)a[r]=s(e[r]);return a}var a={};a.prototype=e.prototype;for(var i in e)a[i]=s(e[i]);return a}return e}e.admin="FALSE";var l=n.get("ADMIN");"TRUE"===l&&(e.isAdmin="TRUE"),e.$back=function(){window.history.back()};var c="3px dotted grey";e.viewModel={},e.viewModel.metrics=[],e.viewModel.columnHeaders=[];var m=new Date;e.viewModel.year=m.getFullYear(),e.viewModel.current_month=m.getMonth()+1,e.viewModel.dashboard_id=d.dashboard_id,e.viewModel.metricId=d.metric_id,e.viewModel.showPercentComplete="FALSE","1"===d.show_percent_complete&&(e.viewModel.showPercentComplete="TRUE");var u=new Array;u[0]="Jan",u[1]="Feb",u[2]="Mar",u[3]="Apr",u[4]="May",u[5]="Jun",u[6]="Jul",u[7]="Aug",u[8]="Sep",u[9]="Oct",u[10]="Nov",u[11]="Dec";for(var p=parseInt(d.start_year,10),_=parseInt(d.start_month,10),h=parseInt(d.total_months,10),v=(new Date(p,_-1,1),new Date(p,_-1+h,1),[]),f=0;f<h;f++){var w={},y=_+f,g=new Date(p,y-1,1),b=u[g.getMonth()],M=g.getFullYear();M=M.toString().substr(2,2),w.value=b+M,e.viewModel.columnHeaders.push(w);var D={};D.year=g.getFullYear(),D.month=g.getMonth()+1,D.measure="GRAY",v.push(D)}var S={length:"number",sort:"function",slice:"function",splice:"function"};t.getDashboardDetails(d.dashboard_id,d.start_year,d.start_month,d.total_months,d.metric_id).then(function(t){for(var a=-1,r=0;r<t.data.length;r++){if(0==r&&(e.viewModel.metricId?e.viewModel.dashboardDescription=t.data[r].parent_label:e.viewModel.dashboardDescription=t.data[r].dashboard_description),a!=t.data[r].metric_id){r>0&&e.viewModel.metrics.push(i);var i={};i.metricId=t.data[r].metric_id,i.label=t.data[r].label,i.definition=t.data[r].definition,i.HasChildDash=t.data[r].HasChildDash,i.displayType=t.data[r].displaytype,i.calculationInterval=t.data[r].calculation_interval,i.externalDashboard=t.data[r].externalDashboard,i.ytdval=t.data[r].ytdval,i.initiativeExternalDashboard=t.data[r].initiativeExternalDashboard,i.initiativeMetaDataId=t.data[r].initiative_meta_data_id,i.planStart=t.data[r].plan_start,i.planFinish=t.data[r].plan_finish,i.actualStart=t.data[r].actual_start,i.actualFinish=t.data[r].actual_finish,i.targetFinish=t.data[r].target_finish,i.shortNote=t.data[r].short_note,i.dashboardId=t.data[r].dashboard_id,i.year=t.data[r].year,i.HasChildDash=t.data[r].HasChildDash,i.startYear=d.start_year,i.startMonth=d.start_month,i.totalMonths=d.total_months,i.cells=s(v),a=t.data[r].metric_id}var n={};t.data[r].discussionPointId&&(n.discussionPointId=t.data[r].discussionPointId),n.year=t.data[r].year,n.month=t.data[r].month,n.val=t.data[r].val,n.measure=t.data[r].measure,n.displaytype=t.data[r].displaytype;for(var o=0;o<h;o++){var l=new Date(i.cells[o].year,i.cells[o].month-1,1),m=new Date(n.year,n.month-1,1);m.getTime()===l.getTime()&&(i.cells[o]=n)}if(r==t.data.length-1){e.viewModel.metrics.push(i);for(var u=0;u<e.viewModel.metrics.length;u++)for(var p=0;p<e.viewModel.metrics[u].cells.length;p++){var _=0,f=0,w=0,y=0,g=0,b=0,M=0,D=0,S=0,C=0,E="Plan Start",R="Plan Launch",T="Actual Start",B="Actual Launch",U="Target Launch",$=[],A=[];if(e.viewModel.metrics[u].planStart){var k=new Date(e.viewModel.metrics[u].planStart);_=k.getUTCMonth()+1,b=k.getUTCFullYear(),$.push(k)}if(e.viewModel.metrics[u].actualStart){var L=new Date(e.viewModel.metrics[u].actualStart);f=L.getUTCMonth()+1,M=L.getUTCFullYear(),$.push(L)}if(e.viewModel.metrics[u].planFinish){var P=new Date(e.viewModel.metrics[u].planFinish);w=P.getUTCMonth()+1,D=P.getUTCFullYear(),A.push(P)}if(e.viewModel.metrics[u].actualFinish){var N=new Date(e.viewModel.metrics[u].actualFinish);y=N.getUTCMonth()+1,S=N.getUTCFullYear(),A.push(N)}if(e.viewModel.metrics[u].targetFinish){var q=new Date(e.viewModel.metrics[u].targetFinish);g=q.getUTCMonth()+1,C=q.getUTCFullYear(),A.push(q)}var F=new Date(Math.min.apply(null,$)),I=new Date(Math.max.apply(null,A)),j=new Date(F.getFullYear(),F.getMonth(),1),O=new Date(I.getFullYear(),I.getMonth(),1),Y=new Date(e.viewModel.metrics[u].cells[p].year,e.viewModel.metrics[u].cells[p].month-1,1);_===e.viewModel.metrics[u].cells[p].month&&b===e.viewModel.metrics[u].cells[p].year&&(e.viewModel.metrics[u].cells[p].planStart=E),f===e.viewModel.metrics[u].cells[p].month&&M===e.viewModel.metrics[u].cells[p].year&&(e.viewModel.metrics[u].cells[p].actualStart=T),w===e.viewModel.metrics[u].cells[p].month&&D===e.viewModel.metrics[u].cells[p].year&&(e.viewModel.metrics[u].cells[p].planFinish=R),y===e.viewModel.metrics[u].cells[p].month&&S===e.viewModel.metrics[u].cells[p].year&&(e.viewModel.metrics[u].cells[p].actualFinish=B),g===e.viewModel.metrics[u].cells[p].month&&C===e.viewModel.metrics[u].cells[p].year&&(e.viewModel.metrics[u].cells[p].targetLaunch=U),j.getTime()==Y.getTime()&&(e.viewModel.metrics[u].cells[p].borderTop=c,e.viewModel.metrics[u].cells[p].borderBottom=c,e.viewModel.metrics[u].cells[p].borderLeft=c),O.getTime()==Y.getTime()&&(e.viewModel.metrics[u].cells[p].borderTop=c,e.viewModel.metrics[u].cells[p].borderBottom=c,e.viewModel.metrics[u].cells[p].borderRight=c),Y.getTime()>j.getTime()&&Y.getTime()<O.getTime()&&(e.viewModel.metrics[u].cells[p].borderTop=c,e.viewModel.metrics[u].cells[p].borderBottom=c)}}}})}]).factory("BackendServiceInitiativeDashboard",["$http","$q",function(e,t){function a(t,a,n,d,o){var s=e({method:"GET",url:i+t+"/"+a+"/"+n+"/"+d+"/"+o});return r(s)}function r(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var i="/api/initiative_dashboard/";return{getDashboardDetails:a}}]);var app=angular.module("opsVisionApp");app.controller("InitiativeDetailCtrl",["$scope","BackendServiceInitiativeDetail","$q","$http","$cookies","$cookieStore","$routeParams",function(e,t,a,r,i,n,d){function o(e){if(e instanceof Array)return!0;for(var t in f)if(!(t in e&&typeof e[t]==f[t]))return!1;return!0}function s(e){if("object"==typeof e){if(o(e)){for(var t=e.length,a=new Array(t),r=0;r<t;r++)a[r]=s(e[r]);return a}var a={};a.prototype=e.prototype;for(var i in e)a[i]=s(e[i]);return a}return e}function l(e,t){var a;return a=12*(t.getFullYear()-e.getFullYear()),a-=e.getMonth()+1,a+=t.getMonth(),a+=2,a<=0?0:a}e.admin="FALSE";var c=n.get("ADMIN");"TRUE"===c&&(e.isAdmin="TRUE"),e.$back=function(){window.history.back()};var m="3px dotted grey";e.viewModel={},e.viewModel.metrics=[],e.viewModel.columnHeaders=[],e.viewModel.metricId=d.metric_id;var u,p,_,h,v,f={length:"number",sort:"function",slice:"function",splice:"function"},w=[];t.getInitiativeSchedule(d.metricid).then(function(t){var a=[],r=[];if(null!==t.data[0].plan_start){var i=new Date(t.data[0].plan_start);a.push(i)}if(null!==t.data[0].actual_start){var n=new Date(t.data[0].actual_start);a.push(n)}if(null!==t.data[0].plan_finish){var d=new Date(t.data[0].plan_finish);r.push(d)}if(null!==t.data[0].actual_finish){var o=new Date(t.data[0].actual_finish);r.push(o)}if(null!==t.data[0].target_finish){var s=new Date(t.data[0].target_finish);r.push(s)}u=new Date(Math.min.apply(null,a)),p=new Date(Math.max.apply(null,r));var c=new Array;c[0]="Jan",c[1]="Feb",c[2]="Mar",c[3]="Apr",c[4]="May",c[5]="Jun",c[6]="Jul",c[7]="Aug",c[8]="Sep",c[9]="Oct",c[10]="Nov",c[11]="Dec",_=parseInt(u.getFullYear(),10),h=parseInt(u.getMonth()+1,10),v=parseInt(l(u,p));for(var m=0;m<v;m++){var f={},y=h+m,g=new Date(_,y-1,1),b=c[g.getMonth()],M=g.getFullYear();M=M.toString().substr(2,2),f.value=b+M,e.viewModel.columnHeaders.push(f);var D={};D.year=g.getFullYear(),D.month=g.getMonth()+1,D.measure="GRAY",w.push(D)}}),t.getInitiativeDetail(d.metricid).then(function(t){for(var a=-1,r=0;r<t.data.length;r++){if(a!=t.data[r].metric_id){r>0&&e.viewModel.metrics.push(i);var i={};i.metricId=t.data[r].metric_id,i.label=t.data[r].label,i.definition=t.data[r].definition,i.HasChildDash=t.data[r].HasChildDash,i.displayType=t.data[r].displaytype,i.calculationInterval=t.data[r].calculation_interval,i.ytdval=t.data[r].ytdval,e.viewModel.ytdmeasure=t.data[r].ytdmeasure,i.ytdmeasure=t.data[r].ytdmeasure,i.initiativeMetaDataId=t.data[r].initiative_meta_data_id,i.planStart=t.data[r].plan_start,i.planFinish=t.data[r].plan_finish,i.actualStart=t.data[r].actual_start,i.actualFinish=t.data[r].actual_finish,i.targetFinish=t.data[r].target_finish,i.shortNote=t.data[r].short_note,i.dashboardId=t.data[r].dashboard_id,i.year=t.data[r].year,i.HasChildDash=t.data[r].HasChildDash,i.valueProposition=t.data[r].value_proposition,i.startYear=b,i.startMonth=p,i.totalMonths=v,i.cells=s(w),a=t.data[r].metric_id}var n={};t.data[r].discussionPointId&&(n.discussionPointId=t.data[r].discussionPointId),n.year=t.data[r].year,n.month=t.data[r].month,n.val=t.data[r].val,n.measure=t.data[r].measure,n.displaytype=t.data[r].displaytype;for(var d=0;d<v;d++){var o=new Date(i.cells[d].year,i.cells[d].month-1,1),l=new Date(n.year,n.month-1,1);l.getTime()===o.getTime()&&(i.cells[d]=n)}if(r==t.data.length-1){e.viewModel.metrics.push(i);for(var c=0;c<e.viewModel.metrics.length;c++)for(var u=0;u<e.viewModel.metrics[c].cells.length;u++){var p=0,_=0,h=0,f=0,y=0,g=0,b=0,M=0,D=0,S=0,C=0,E=0,R="Plan Start",T="Plan Launch",B="Actual Start",U="Actual Launch",$="Target Launch",A=[],k=[];if(e.viewModel.metrics[c].planStart){var L=new Date(e.viewModel.metrics[c].planStart);_=L.getUTCMonth()+1,M=L.getUTCFullYear(),A.push(L)}if(e.viewModel.metrics[c].actualStart){var P=new Date(e.viewModel.metrics[c].actualStart);h=P.getUTCMonth()+1,D=P.getUTCFullYear(),A.push(P)}if(e.viewModel.metrics[c].planFinish){var N=new Date(e.viewModel.metrics[c].planFinish);f=N.getUTCMonth()+1,S=N.getUTCFullYear(),k.push(N)}if(e.viewModel.metrics[c].actualFinish){var q=new Date(e.viewModel.metrics[c].actualFinish);y=q.getUTCMonth()+1,C=q.getUTCFullYear(),k.push(q)}if(e.viewModel.metrics[c].targetFinish){var F=new Date(e.viewModel.metrics[c].targetFinish);g=F.getUTCMonth()+1,E=F.getUTCFullYear(),k.push(F)}var I=new Date(Math.min.apply(null,A)),j=new Date(Math.max.apply(null,k)),O=new Date(I.getFullYear(),I.getMonth(),1),Y=new Date(j.getFullYear(),j.getMonth(),1),x=new Date(e.viewModel.metrics[c].cells[u].year,e.viewModel.metrics[c].cells[u].month-1,1);_===e.viewModel.metrics[c].cells[u].month&&M===e.viewModel.metrics[c].cells[u].year&&(e.viewModel.metrics[c].cells[u].planStart=R),h===e.viewModel.metrics[c].cells[u].month&&D===e.viewModel.metrics[c].cells[u].year&&(e.viewModel.metrics[c].cells[u].actualStart=B),f===e.viewModel.metrics[c].cells[u].month&&S===e.viewModel.metrics[c].cells[u].year&&(e.viewModel.metrics[c].cells[u].planFinish=T),y===e.viewModel.metrics[c].cells[u].month&&C===e.viewModel.metrics[c].cells[u].year&&(e.viewModel.metrics[c].cells[u].actualFinish=U),g===e.viewModel.metrics[c].cells[u].month&&E===e.viewModel.metrics[c].cells[u].year&&(e.viewModel.metrics[c].cells[u].targetLaunch=$),O.getTime()==x.getTime()&&(e.viewModel.metrics[c].cells[u].borderTop=m,e.viewModel.metrics[c].cells[u].borderBottom=m,e.viewModel.metrics[c].cells[u].borderLeft=m),Y.getTime()==x.getTime()&&(e.viewModel.metrics[c].cells[u].borderTop=m,e.viewModel.metrics[c].cells[u].borderBottom=m,e.viewModel.metrics[c].cells[u].borderRight=m),x.getTime()>O.getTime()&&x.getTime()<Y.getTime()&&(e.viewModel.metrics[c].cells[u].borderTop=m,e.viewModel.metrics[c].cells[u].borderBottom=m)}}}})}]).factory("BackendServiceInitiativeDetail",["$http","$q",function(e,t){function a(t){var a=e({method:"GET",url:n+t});return i(a)}function r(t){var a=e({method:"GET",url:n+"schedule/"+t});return i(a)}function i(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var n="/api/initiative_details/";return{getInitiativeDetail:a,getInitiativeSchedule:r}}]);var app=angular.module("opsVisionApp");app.controller("InitiativeUpdateRequestCtrl",["$scope","$cookies","$cookieStore","BackendServiceInitiativeUpdateRequest","$q","$http","$routeParams",function(e,t,a,r,i,n,d){e.viewModel={},e.viewModel.$back=function(){window.history.back()},e.viewModel.isAdmin=!1;var o=a.get("ADMIN");"TRUE"===o&&(e.viewModel.isAdmin=!0),e.viewModel.metric_id=d.metric_id,e.viewModel.initiative_update_request_id=d.initiative_update_request_id,e.viewModel.initiativeUpdateRequest={},e.viewModel.master={};var s=new Date;e.viewModel.year=s.getFullYear(),Date.prototype.yyyyDASHmmDASHdd=function(){var e=this.getFullYear().toString(),t=(this.getMonth()+1).toString(),a=this.getDate().toString();return e+"-"+(t[1]?t:"0"+t[0])+"-"+(a[1]?a:"0"+a[0])},e.viewModel.requireDiscussionItem=!1,e.viewModel.requireDiscussionItemCheck=function(){var t=e.viewModel.initiativeUpdateRequest.status;"GREEN"===t||""===t||null===t?e.viewModel.requireDiscussionItem=!1:e.viewModel.requireDiscussionItem=!0},e.viewModel.todaysDt=s.yyyyDASHmmDASHdd;var s=new Date;e.viewModel.year=s.getFullYear(),e.viewModel.month=s.getMonth()+1;var l=function(){r.getInitiativeUpdateRequest(e.viewModel.metric_id,e.viewModel.initiative_update_request_id).then(function(t){e.viewModel.initiativeUpdateRequest.initiative_update_request_id=t.data[0].initiative_update_request_id,e.viewModel.initiativeUpdateRequest.metric_id=t.data[0].metric_id,e.viewModel.initiativeUpdateRequest.label=t.data[0].label,t.data[0].status_dt&&(e.viewModel.initiativeUpdateRequest.status_dt=new Date(t.data[0].status_dt)),e.viewModel.initiativeUpdateRequest.status_month=t.data[0].status_month,e.viewModel.initiativeUpdateRequest.status_year=t.data[0].status_year,e.viewModel.initiativeUpdateRequest.percent_complete=t.data[0].percent_complete,e.viewModel.initiativeUpdateRequest.status=t.data[0].status,e.viewModel.initiativeUpdateRequest.comment=t.data[0].comment,e.viewModel.initiativeUpdateRequest.status_submitted_by=t.data[0].status_submitted_by,e.viewModel.initiativeUpdateRequest.status_approved_by=t.data[0].status_approved_by,e.viewModel.initiativeUpdateRequest.status_cd=t.data[0].initiative_update_request_status_cd,t.data[0].approved_dt&&(e.viewModel.initiativeUpdateRequest.approved_dt=new Date(t.data[0].approved_dt)),e.viewModel.initiativeUpdateRequest.discussion_point_detail=t.data[0].discussion_point_detail,e.viewModel.initiativeUpdateRequest.updated_by=t.data[0].updated_by,t.data[0].updated&&(e.viewModel.initiativeUpdateRequest.updated=new Date(t.data[0].updated)),e.viewModel.requireDiscussionItemCheck(),e.viewModel.master=angular.copy(e.viewModel.initiativeUpdateRequest)})};e.approve=function(t){t.status_approved_by&&t.status_dt&&t.percent_complete&&t.status&&t.status_submitted_by&&t.updated_by&&("GREEN"==t.status||t.discussion_point_detail)?r.approveInitiativeUpdateRequest(t.initiative_update_request_id,t).then(function(){var t=new Date,a=t.getFullYear()+"-"+(t.getMonth()+1)+"-"+t.getDate()+" "+t.getHours()+":"+t.getMinutes()+":"+t.getSeconds();e.viewModel.error=null,e.viewModel.success="APPROVAL SUCCESSFUL:  "+a,l()}):(e.viewModel.success=null,e.viewModel.error="WARNING:  Complete all REQUIRED Fields")},e.cancel=function(t){r.cancelInitiativeUpdateRequest(t.initiative_update_request_id).then(function(){var t=new Date,a=t.getFullYear()+"-"+(t.getMonth()+1)+"-"+t.getDate()+" "+t.getHours()+":"+t.getMinutes()+":"+t.getSeconds();e.viewModel.error=null,e.viewModel.success="CANCEL SUCCESSFUL:  "+a,l()})},e.submit=function(t){if(t.initiative_update_request_id)if(JSON.stringify(t)!=JSON.stringify(e.viewModel.master)){r.updateInitiativeUpdateRequest(t.initiative_update_request_id,t,e.viewModel.master);var a=new Date,i=a.getFullYear()+"-"+(a.getMonth()+1)+"-"+a.getDate()+" "+a.getHours()+":"+a.getMinutes()+":"+a.getSeconds();e.viewModel.error=null,e.viewModel.success="SAVE SUCCESSFUL:  "+i,l()}else e.viewModel.success=null,e.viewModel.error="WARNING:  No Changes made to Initiative Update Request";else t.status_dt&&t.percent_complete&&t.status&&t.status_submitted_by&&t.updated_by&&("GREEN"==t.status||t.discussion_point_detail)?r.createInitiativeUpdateRequest(t).then(function(t){e.viewModel.initiative_update_request_id=t.data;var a=new Date,r=a.getFullYear()+"-"+(a.getMonth()+1)+"-"+a.getDate()+" "+a.getHours()+":"+a.getMinutes()+":"+a.getSeconds();e.viewModel.error=null,e.viewModel.success="SAVE SUCCESSFUL:  "+r,l()}):(e.viewModel.success=null,e.viewModel.error="WARNING:  Complete all REQUIRED Fields");e.viewModel.master=angular.copy(t)},l()}]).factory("BackendServiceInitiativeUpdateRequest",["$http","$q",function(e,t){function a(t,a){var r=e({method:"GET",url:s+t+"/"+a});return o(r)}function r(t){var a=e({method:"POST",data:t,url:s});return o(a)}function i(t,a){var r=e({method:"PUT",data:a,url:s+t});return o(r)}function n(t){var a=e({method:"DELETE",url:s+t});return o(a)}function d(t,a){var r=e({method:"PUT",data:a,url:s+"approve/"+t});return o(r)}function o(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var s="/api/initiative_update_request/";return{getInitiativeUpdateRequest:a,createInitiativeUpdateRequest:r,updateInitiativeUpdateRequest:i,cancelInitiativeUpdateRequest:n,approveInitiativeUpdateRequest:d}}]);var app=angular.module("opsVisionApp");app.controller("InitiativeUpdateRequestListCtrl",["$scope","BackendServiceInitiativeUpdateRequestList","$q","$http","$routeParams","$filter",function(e,t,a,r,i,n){e.viewModel={},e.viewModel.$back=function(){window.history.back()},e.viewModel.year=i.year,e.viewModel.month=i.month,e.viewModel.dashboard_id=i.dashboard_id,Number(i.month)-1===0?(e.viewModel.prev_month=12,e.viewModel.prev_year=Number(i.year)-1):(e.viewModel.prev_month=Number(i.month)-1,e.viewModel.prev_year=Number(i.year)),Number(i.month)+1===13?(e.viewModel.next_month=1,e.viewModel.next_year=Number(i.year)+1):(e.viewModel.next_month=Number(i.month)+1,e.viewModel.next_year=Number(i.year));var d=["January","February","March","April","May","June","July","August","September","October","November","December"];e.viewModel.monthName=d[i.month-1],t.getInitiativesUpdateRequests(e.viewModel.dashboard_id,e.viewModel.month,e.viewModel.year).then(function(t){e.viewModel.rowCollection=t.data,t.data.length>0&&(e.viewModel.dashboardName=t.data[0].dashboardName)}),e.viewModel.displayedCollection=[].concat(e.viewModel.rowCollection)}]).factory("BackendServiceInitiativeUpdateRequestList",["$http","$q",function(e,t){function a(t,a,n){var d=e({method:"GET",url:i+t+"/"+a+"/"+n});return r(d)}function r(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var i="/api/initiative_update_request/list/";return{getInitiativesUpdateRequests:a}}]);var app=angular.module("opsVisionApp");app.controller("MetaDataScheduleDefCtrl",["$scope","close",function(e,t){e.close=function(e){t(e,500)}}]);var app=angular.module("opsVisionApp");app.controller("MetricDetailsCtrl",["$scope","BackendServiceMetricDetails","$q","$http","$routeParams",function(e,t,a,r,i){e.dashboardid=i.dashboardid,e.channels=[],e.metricid=i.metricid,e.$back=function(){window.history.back()},e.gridOptions={},e.metric_value_mtd="Error",e.metric_measurement_mtd="Error",e.metric_value_ytd="Error",e.metric_measurement_ytd="Error",e.metric_label="Error",e.metric_definition="Error",e.metric_value_proposition="Error",e.threshold_green="Error",e.threshold_yellow="Error",e.threshold_green="Error",e.metric_created_by="Error";var n=new Date;"MONTHLY"===e.calculation_interval&&n.setMonth(n.getMonth()-1),e.year=n.getFullYear(),e.month=n.getMonth()+1,t.getMetricDetails(e.metricid,e.month,e.year).then(function(t){1===t.data.length&&(e.metric_label=t.data[0].label,e.metric_definition=t.data[0].definition,e.metric_value_proposition=t.data[0].value_proposition,e.metric_value_mtd=t.data[0].metric_value_mtd,e.metric_measurement_mtd=t.data[0].metric_measurement_mtd,e.metric_value_ytd=t.data[0].metric_value_ytd,e.metric_measurement_ytd=t.data[0].metric_measurement_ytd,e.display_type=t.data[0].display_type,e.metric_created_by=t.data[0].created_by,e.type=t.data[0].type,"INITIATIVE"===t.data[0].type?(e.threshold_green="On Schedule",e.threshold_yellow="Schedule at Risk",e.threshold_red="Target Launched Schedule will be Missed"):(e.threshold_green=t.data[0].threshold_green,e.threshold_yellow=t.data[0].threshold_yellow,e.threshold_red=t.data[0].threshold_red))})}]).factory("BackendServiceMetricDetails",["$http","$q",function(e,t){function a(t,a,n){var d=e({method:"GET",url:i+t+"/"+a+"/"+n});return r(d)}function r(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var i="/api/metric_details/";return{getMetricDetails:a}}]);var app=angular.module("opsVisionApp");app.controller("MetricsCtrl",["$scope","BackendServiceMetrics","$q",function(e,t,a){e.$back=function(){window.history.back()},e.gridOptions={rowHeight:30};var r=function(){t.getMetrics().then(function(t){e.gridOptions.data=t.data,i(t.data.length)})};e.gridOptions.columnDefs=[{name:"metric_id",displayName:"Metric Id",enableCellEdit:!1},{name:"metric_cd",displayName:"Metric Code",enableCellEdit:!0},{name:"label",displayName:"Label",enableCellEdit:!0,width:"20%"},{name:"Add_Content",displayName:"Action",cellTemplate:'<div style="text-align:center"> <a   class="btn btn-xs btn-primary" type="button" href="/metric_edit/{{row.entity.metric_id}}">Edit / Delete</a> &nbsp;  <a   class="btn btn-xs btn-primary" type="button" href="/metric_measurements/{{row.entity.metric_id}}/2016">Add Measurements</a>&nbsp;  <a   class="btn btn-xs btn-primary" type="button" href="/metric_meta_data/{{row.entity.metric_id}}">Add Initiative Metadata</a></div>',enableCellEdit:!1,width:"30%"}],r();var i=function(e){var t=60,a=30*e+t;angular.element(document.getElementsByClassName("gridStyle")[0]).css("height",a+"px")}}]).factory("BackendServiceMetrics",["$http","$q",function(e,t){function a(){var t=e({method:"GET",url:o});return d(t)}function r(t){var a=e({method:"POST",data:t,url:o});return d(a)}function i(t,a){var r=e({method:"PUT",data:a,url:o+t});return d(r)}function n(t){var a=e({method:"DELETE",url:o+t});return d(a)}function d(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var o="/api/metrics/";return{getMetrics:a,createMetric:r,updateMetric:i,deleteMetric:n}}]);var app=angular.module("opsVisionApp");app.controller("MetricEditCtrl",["$scope","BackendServiceMetricEdit","$q","$http","$routeParams",function(e,t,a,r,i){e.$back=function(){window.history.back()},e.metric_id=i.metric_id,e.metric={},e.master={},e.previous_metric_id=+i.metric_id-1,e.next_metric_id=+i.metric_id+1;
var n=new Date;e.year=n.getFullYear();var d=function(){e.metric_id&&t.getMetric(e.metric_id).then(function(t){e.metric.metric_id=t.data[0].metric_id,e.metric.metric_cd=t.data[0].metric_cd,e.metric.label=t.data[0].label,e.metric.definition=t.data[0].definition,e.metric.project=t.data[0].project,e.metric.area=t.data[0].area,e.metric.threshold_green=t.data[0].threshold_green,e.metric.threshold_yellow=t.data[0].threshold_yellow,e.metric.threshold_red=t.data[0].threshold_red,e.metric.parent_metric_id=t.data[0].parent_metric_id,t.data[0].metric_start_date&&(e.metric.metric_start_date=new Date(t.data[0].metric_start_date)),e.metric.type=t.data[0].type,e.metric.display_type=t.data[0].display_type,e.metric.calculation_interval=t.data[0].calculation_interval,e.metric.created_by=t.data[0].created_by,t.data[0].created&&(e.metric.created=new Date(t.data[0].created)),e.metric.updated_by=t.data[0].updated_by,t.data[0].updated&&(e.metric.updated=new Date(t.data[0].updated)),e.master=angular.copy(e.metric)})};e.metric_id&&d(),e.submit=function(a){if(void 0===a.metric_id)if(console.log(a),console.log(a.label),console.log(a.metric_cd),console.log(a.definition),console.log(a.threshold_green),console.log(a.threshold_yellow),console.log(a.threshold_red),console.log(a.metric_start_date),console.log(a.type),console.log(a.display_type),console.log(a.calculation_interval),console.log(a.updated_by),a.threshold_green||console.log("this should not work, mistake"),a.threshold_green&&console.log("crazy"),a.label||console.log("this should not work, mistake on label"),a.label&&console.log("crazy again for label"),a.label&&a.metric_cd&&a.definition&&a.threshold_green&&a.threshold_yellow&&a.threshold_red&&a.metric_start_date&&a.type&&a.display_type&&a.calculation_interval&&a.type&&a.display_type&&a.calculation_interval&&a.updated_by){t.createMetric(a);var r=new Date,i=r.getFullYear()+"-"+(r.getMonth()+1)+"-"+r.getDate()+" "+r.getHours()+":"+r.getMinutes()+":"+r.getSeconds();e.error=null,e.success="SAVE SUCCESSFUL:  "+i}else e.success=null,e.error="ERROR:  Complete all REQUIRED Fields";else if(JSON.stringify(a)!=JSON.stringify(e.master)){t.updateMetric(a.metric_id,a,e.master);var r=new Date,i=r.getFullYear()+"-"+(r.getMonth()+1)+"-"+r.getDate()+" "+r.getHours()+":"+r.getMinutes()+":"+r.getSeconds();e.error=null,e.success="SAVE SUCCESSFUL:  "+i}else e.success=null,e.error="WARNING:  No Changes made to Metric";e.master=angular.copy(a)},d()}]).factory("BackendServiceMetricEdit",["$http","$q",function(e,t){function a(t){var a=e({method:"GET",url:d+t});return n(a)}function r(t){var a=e({method:"POST",data:t,url:d});return n(a)}function i(t,a){var r=e({method:"PUT",data:a,url:d+t});return n(r)}function n(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var d="/api/metrics/";return{getMetric:a,createMetric:r,updateMetric:i}}]);var app=angular.module("opsVisionApp");app.controller("MetricMeasurementsCtrl",["$scope","BackendServiceMetricMeasurements","$q","$http","$routeParams",function(e,t,a,r,i){e.$back=function(){window.history.back()},e.metric_id=i.metric_id,e.previous_metric_id=+i.metric_id-1,e.next_metric_id=+i.metric_id+1,e.year=i.year,e.prevYear=+i.year-1,e.nextYear=+i.year+1,e.metric_measurements={},e.master={};var n=function(){t.getMeasurements(e.metric_id,e.year).then(function(t){for(var a=0;a<t.data.length;a++)e.metric_measurements.year=t.data[a].year,e.metric_measurements.metric_id=t.data[a].metric_id,e.metric_measurements.metric_cd=t.data[a].metric_cd,e.metric_measurements.label=t.data[a].label,e.metric_measurements.updated_by=t.data[a].mtd_updated_by,t.data[a].mtd_updated&&(e.metric_measurements.updated=new Date(t.data[a].mtd_updated)),1===t.data[a].mtd_month&&(e.metric_measurements.jan_mtd_id=t.data[a].mtd_id,e.metric_measurements.jan_mtd_value=t.data[a].mtd_value,e.metric_measurements.jan_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.jan_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),2===t.data[a].mtd_month&&(e.metric_measurements.feb_mtd_id=t.data[a].mtd_id,e.metric_measurements.feb_mtd_value=t.data[a].mtd_value,e.metric_measurements.feb_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.feb_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),3===t.data[a].mtd_month&&(e.metric_measurements.mar_mtd_id=t.data[a].mtd_id,e.metric_measurements.mar_mtd_value=t.data[a].mtd_value,e.metric_measurements.mar_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.mar_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),4===t.data[a].mtd_month&&(e.metric_measurements.apr_mtd_id=t.data[a].mtd_id,e.metric_measurements.apr_mtd_value=t.data[a].mtd_value,e.metric_measurements.apr_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.apr_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),5===t.data[a].mtd_month&&(e.metric_measurements.may_mtd_id=t.data[a].mtd_id,e.metric_measurements.may_mtd_value=t.data[a].mtd_value,e.metric_measurements.may_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.may_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),6===t.data[a].mtd_month&&(e.metric_measurements.jun_mtd_id=t.data[a].mtd_id,e.metric_measurements.jun_mtd_value=t.data[a].mtd_value,e.metric_measurements.jun_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.jun_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),7===t.data[a].mtd_month&&(e.metric_measurements.jul_mtd_id=t.data[a].mtd_id,e.metric_measurements.jul_mtd_value=t.data[a].mtd_value,e.metric_measurements.jul_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.jul_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),8===t.data[a].mtd_month&&(e.metric_measurements.aug_mtd_id=t.data[a].mtd_id,e.metric_measurements.aug_mtd_value=t.data[a].mtd_value,e.metric_measurements.aug_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.aug_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),9===t.data[a].mtd_month&&(e.metric_measurements.sep_mtd_id=t.data[a].mtd_id,e.metric_measurements.sep_mtd_value=t.data[a].mtd_value,e.metric_measurements.sep_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.sep_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),10===t.data[a].mtd_month&&(e.metric_measurements.oct_mtd_id=t.data[a].mtd_id,e.metric_measurements.oct_mtd_value=t.data[a].mtd_value,e.metric_measurements.oct_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.oct_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),11===t.data[a].mtd_month&&(e.metric_measurements.nov_mtd_id=t.data[a].mtd_id,e.metric_measurements.nov_mtd_value=t.data[a].mtd_value,e.metric_measurements.nov_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.nov_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),12===t.data[a].mtd_month&&(e.metric_measurements.dec_mtd_id=t.data[a].mtd_id,e.metric_measurements.dec_mtd_value=t.data[a].mtd_value,e.metric_measurements.dec_mtd_measurement=t.data[a].mtd_measurement,e.metric_measurements.dec_mtd_discussion_point_id=t.data[a].mtd_discussion_point_id),e.metric_measurements.ytd_id=t.data[a].ytd_id,e.metric_measurements.ytd_value=t.data[a].ytd_value,e.metric_measurements.ytd_measurement=t.data[a].ytd_measurement;e.master=angular.copy(e.metric_measurements)})};e.metric_id&&n();var d=function(e,a,r,i,n,d,o,s,l){var c={};return c.metric_id=e,c.id=a,c.value=r,c.month=s,c.year=o,c.measurement=n,c.updated_by=l,!a||r==i&&n==d?a||r==i&&n==d?"warning":(t.createMtdMeasurement(c),"success"):(t.updateMtdMeasurement(c.id,c),"success")},o=function(e,a,r,i,n,d,o,s){var l={};return l.metric_id=e,l.id=a,l.value=r,l.measurement=n,l.year=o,l.updated_by=s,!a||r==i&&n==d?a||r==i&&n==d?"warning":(t.createYtdMeasurement(l),"success"):(t.updateYtdMeasurement(l.id,l),"success")};e.submit=function(t){var a="false",r=d(t.metric_id,t.jan_mtd_id,t.jan_mtd_value,e.master.jan_mtd_value,t.jan_mtd_measurement,e.master.jan_mtd_measurement,t.year,1,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.feb_mtd_id,t.feb_mtd_value,e.master.feb_mtd_value,t.feb_mtd_measurement,e.master.feb_mtd_measurement,t.year,2,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.mar_mtd_id,t.mar_mtd_value,e.master.mar_mtd_value,t.mar_mtd_measurement,e.master.mar_mtd_measurement,t.year,3,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.apr_mtd_id,t.apr_mtd_value,e.master.apr_mtd_value,t.apr_mtd_measurement,e.master.apr_mtd_measurement,t.year,4,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.may_mtd_id,t.may_mtd_value,e.master.may_mtd_value,t.may_mtd_measurement,e.master.may_mtd_measurement,t.year,5,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.jun_mtd_id,t.jun_mtd_value,e.master.jun_mtd_value,t.jun_mtd_measurement,e.master.jun_mtd_measurement,t.year,6,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.jul_mtd_id,t.jul_mtd_value,e.master.jul_mtd_value,t.jul_mtd_measurement,e.master.jul_mtd_measurement,t.year,7,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.aug_mtd_id,t.aug_mtd_value,e.master.aug_mtd_value,t.aug_mtd_measurement,e.master.aug_mtd_measurement,t.year,8,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.sep_mtd_id,t.sep_mtd_value,e.master.sep_mtd_value,t.sep_mtd_measurement,e.master.sep_mtd_measurement,t.year,9,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.oct_mtd_id,t.oct_mtd_value,e.master.oct_mtd_value,t.oct_mtd_measurement,e.master.oct_mtd_measurement,t.year,10,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.nov_mtd_id,t.nov_mtd_value,e.master.nov_mtd_value,t.nov_mtd_measurement,e.master.nov_mtd_measurement,t.year,11,t.metric_updated_by);"success"===r&&(a="true");var r=d(t.metric_id,t.dec_mtd_id,t.dec_mtd_value,e.master.dec_mtd_value,t.dec_mtd_measurement,e.master.dec_mtd_measurement,t.year,12,t.metric_updated_by);"success"===r&&(a="true");var r=o(t.metric_id,t.ytd_id,t.ytd_value,e.master.ytd_value,t.ytd_measurement,e.master.ytd_measurement,t.year,t.metric_updated_by);if("success"===r&&(a="true"),"true"===a){var i=new Date,n=i.getFullYear()+"-"+(i.getMonth()+1)+"-"+i.getDate()+" "+i.getHours()+":"+i.getMinutes()+":"+i.getSeconds();e.error=null,e.success="SAVE SUCCESSFUL:  "+n}else e.success=null,e.error="WARNING:  No Changes made to Metric";e.master=angular.copy(t)},n()}]).factory("BackendServiceMetricMeasurements",["$http","$q",function(e,t){function a(t,a){var r=e({method:"GET",url:"/api/metric_measurements/"+t+"/"+a});return o(r)}function r(t){var a=e({method:"POST",data:t,url:"/api/metric_mtd_measurements/"});return o(a)}function i(t){var a=e({method:"POST",data:t,url:"/api/metric_ytd_measurements/"});return o(a)}function n(t,a){var r=e({method:"PUT",data:a,url:"/api/metric_mtd_measurements/"+t});return o(r)}function d(t,a){var r=e({method:"PUT",data:a,url:"/api/metric_ytd_measurements/"+t});return o(r)}function o(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}return{getMeasurements:a,createMtdMeasurement:r,createYtdMeasurement:i,updateMtdMeasurement:n,updateYtdMeasurement:d}}]);var app=angular.module("opsVisionApp");app.controller("MetricMetaDataCtrl",["$scope","BackendServiceMetricMetaData","$q","$http","$routeParams",function(e,t,a,r,i){e.$back=function(){window.history.back()},e.metric_id=i.metric_id,e.previous_metric_id=+i.metric_id-1,e.next_metric_id=+i.metric_id+1,e.metric={},e.master={};var n=new Date;e.year=n.getFullYear();var d=function(){t.getMetricMetaData(e.metric_id).then(function(t){e.metric.metric_id=t.data[0].metric_id,e.metric.metric_cd=t.data[0].metric_cd,e.metric.label=t.data[0].label,e.metric.initiative_meta_data_id=t.data[0].initiative_meta_data_id,e.metric.short_note=t.data[0].short_note,e.metric.long_note=t.data[0].long_note,e.metric.value_proposition=t.data[0].value_proposition,t.data[0].plan_start&&(e.metric.plan_start=new Date(t.data[0].plan_start)),t.data[0].plan_finish&&(e.metric.plan_finish=new Date(t.data[0].plan_finish)),t.data[0].actual_start&&(e.metric.actual_start=new Date(t.data[0].actual_start)),t.data[0].actual_finish&&(e.metric.actual_finish=new Date(t.data[0].actual_finish)),t.data[0].target_finish&&(e.metric.target_finish=new Date(t.data[0].target_finish)),e.metric.strategic_priority=t.data[0].strategic_priority,e.metric.updated_by=t.data[0].updated_by,e.metric.technology_lead=t.data[0].technology_lead,e.metric.product_lead=t.data[0].product_lead,t.data[0].updated&&(e.metric.updated=new Date(t.data[0].updated)),e.master=angular.copy(e.metric)})};e.submit=function(a){if(a.initiative_meta_data_id)if(JSON.stringify(a)!=JSON.stringify(e.master)){t.updateMetricMetaData(a.initiative_meta_data_id,a,e.master);var r=new Date,i=r.getFullYear()+"-"+(r.getMonth()+1)+"-"+r.getDate()+" "+r.getHours()+":"+r.getMinutes()+":"+r.getSeconds();e.error=null,e.success="SAVE SUCCESSFUL:  "+i,d()}else e.success=null,e.error="WARNING:  No Changes made to Metric Meta Data";else if(a.plan_start&&a.plan_finish&&a.strategic_priority&&a.updated_by){t.createMetricMetaData(a);var r=new Date,i=r.getFullYear()+"-"+(r.getMonth()+1)+"-"+r.getDate()+" "+r.getHours()+":"+r.getMinutes()+":"+r.getSeconds();e.error=null,e.success="SAVE SUCCESSFUL:  "+i,d()}else e.success=null,e.error="WARNING:  Complete all REQUIRED Fields";e.master=angular.copy(a)},d()}]).factory("BackendServiceMetricMetaData",["$http","$q",function(e,t){function a(t){var a=e({method:"GET",url:d+t});return n(a)}function r(t){var a=e({method:"POST",data:t,url:d});return n(a)}function i(t,a){var r=e({method:"PUT",data:a,url:d+t});return n(r)}function n(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var d="/api/metric_meta_data/";return{getMetricMetaData:a,createMetricMetaData:r,updateMetricMetaData:i}}]);var app=angular.module("opsVisionApp");app.controller("ResourcePlanListCtrl",["$scope","BackendServiceResourcePlanList","$q","$http",function(e,t,a,r){e.$back=function(){window.history.back()},e.resourceplans=[],t.getResourcePlans().then(function(t){e.resourceplans=t.data})}]).factory("BackendServiceResourcePlanList",["$http","$q",function(e,t){function a(){var t=e({method:"GET",url:i});return r(t)}function r(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var i="/api/resourceplans/";return{getResourcePlans:a}}]);var app=angular.module("opsVisionApp");app.controller("RoadmapListCtrl",["$scope","BackendServiceRoadmapList","$q","$http",function(e,t,a,r){e.$back=function(){window.history.back()},e.roadmaps=[],t.getRoadmaps().then(function(t){e.roadmaps=t.data})}]).factory("BackendServiceRoadmapList",["$http","$q",function(e,t){function a(){var t=e({method:"GET",url:i});return r(t)}function r(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var i="/api/roadmaps/";return{getRoadmaps:a}}]);var app=angular.module("opsVisionApp");app.controller("SplitScreensCtrl",["$scope","BackendServiceSplitScreens","$q","$http",function(e,t,a,r){e.viewModel={},e.viewModel.$back=function(){window.history.back()},e.viewModel.splitScreens=[];var i=function(){t.getSplitScreens().then(function(t){e.viewModel.splitScreens=t.data})};e.deleteRow=function(e){t.deleteSplitScreen(e).then(function(){i()})},i()}]).factory("BackendServiceSplitScreens",["$http","$q",function(e,t){function a(){var t=e({method:"GET",url:n});return i(t)}function r(t){var a=e({method:"DELETE",url:n+t});return i(a)}function i(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var n="/api/split_screens/";return{getSplitScreens:a,deleteSplitScreen:r}}]);var app=angular.module("opsVisionApp");app.controller("SplitScreenInputCtrl",["$scope","BackendServiceSplitScreenInput","$q","$http","$routeParams",function(e,t,a,r,i){e.viewModel={},e.viewModel.$back=function(){window.history.back()},e.channel_splitscreen_id=i.channel_splitscreen_id,e.viewModel.splitscreen={},e.master={},e.viewModel.selectedChannelDD=null,e.viewModel.channel_dds=[];var n=function(){e.channel_splitscreen_id&&t.getSplitScreen(e.channel_splitscreen_id).then(function(t){console.log(e.channel_splitscreen_id),e.viewModel.splitscreen.channel_splitscreen_id=t.data[0].channel_splitscreen_id,e.viewModel.splitscreen.channel_splitscreen_cd=t.data[0].channel_splitscreen_cd,e.viewModel.splitscreen.description=t.data[0].description,e.viewModel.splitscreen.channel_id_left=t.data[0].channel_id_left,e.viewModel.splitscreen.channel_id_right=t.data[0].channel_id_right,t.data[0].created&&(e.viewModel.splitscreen.created=new Date(t.data[0].created)),e.viewModel.splitscreen.updated_by=t.data[0].updated_by,t.data[0].updated&&(e.viewModel.splitscreen.updated=new Date(t.data[0].updated)),e.master=angular.copy(e.splitscreen)}),t.getChannelDD().then(function(t){e.viewModel.channel_dds=t.data})};e.channel_splitscreen_id&&n(),e.submit=function(a){if(void 0===a.channel_splitscreen_id)if(a.channel_splitscreen_cd&&a.description&&null!=a.channel_id_right&&null!=a.channel_id_left&&a.updated_by){t.createSplitScreen(a);var r=new Date,i=r.getFullYear()+"-"+(r.getMonth()+1)+"-"+r.getDate()+" "+r.getHours()+":"+r.getMinutes()+":"+r.getSeconds();e.viewModel.error=null,e.viewModel.success="SAVE SUCCESSFUL:  "+i}else e.viewModel.success=null,e.viewModel.error="ERROR:  Complete all REQUIRED Fields";else if(JSON.stringify(a)!=JSON.stringify(e.master))if(a.channel_splitscreen_cd&&a.description&&null!=a.channel_id_right&&null!=a.channel_id_left&&a.updated_by){t.updateSplitScreen(a.channel_splitscreen_id,a);var r=new Date,i=r.getFullYear()+"-"+(r.getMonth()+1)+"-"+r.getDate()+" "+r.getHours()+":"+r.getMinutes()+":"+r.getSeconds();e.viewModel.error=null,e.viewModel.success="SAVE SUCCESSFUL:  "+i}else e.viewModel.success=null,e.viewModel.error="ERROR:  Complete all REQUIRED Fields";else e.viewModel.success=null,e.viewModel.error="WARNING:  No Changes made to discussion_point";e.master=angular.copy(a)},n()}]).factory("BackendServiceSplitScreenInput",["$http","$q",function(e,t){function a(t){var a=e({method:"GET",url:o+t});return d(a)}function r(){var t=e({method:"GET",url:"/api/channel_dd/"});return d(t)}function i(t){var a=e({method:"POST",data:t,url:o});return d(a)}function n(t,a){var r=e({method:"PUT",data:a,url:o+t});return d(r)}function d(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var o="/api/split_screens/";return{getSplitScreen:a,createSplitScreen:i,updateSplitScreen:n,getChannelDD:r}}]);var app=angular.module("opsVisionApp");app.controller("URLsCtrl",["$scope","BackendServiceUrl","$q",function(e,t,a){e.$back=function(){window.history.back()},e.myExternalScope=e,e.selectedRows=[],e.gridOptions={enableRowSelection:!0,enableSelectAll:!0,multiSelect:!0,enableCellEditOnFocus:!0,selectionRowHeaderWidth:30,rowHeight:30},e.gridOptions.multiSelect=!0;var r=function(){t.getUrls().then(function(t){e.gridOptions.data=t.data,i(t.data.length)}),e.selectedRows.length=0};e.deleteRows=function(){for(var a=e.selectedRows.length-1;a>=0;a--)t.deleteUrl(e.selectedRows[a]).then(function(e){r()})},e.addNewRow=function(){e.gridOptions.data.push({url_string:null,description:null,updated_by:null}),i(e.gridOptions.data.length)},e.selectedUrlTypeDD=null,e.urltype_dds=[],t.getUrlTypeDD().then(function(t){e.urltype_dds=t.data}),e.gridOptions.columnDefs=[{name:"url_type_id",displayName:"URL Type",cellTemplate:"../partials/urltypedd_external.html",width:"14%"},{name:"url_id",displayName:"URL Id",enableCellEdit:!1,width:"6%"},{name:"url_string",displayName:"URL String",type:"URL",width:"35%"},{name:"description",displayName:"Description",width:"25%"},{name:"updated_by",displayName:"Updated By",width:"10%"},{name:"updated",displayName:"Updated On",enableCellEdit:!1,width:"10%"}],e.saveRow=function(i){var n=a.defer();e.gridApi.rowEdit.setSavePromise(e.gridApi.grid,i,n.promise),void 0===i.url_id?t.createUrl(i):t.updateUrl(i.url_id,i),r(),n.resolve()},e.gridOptions.onRegisterApi=function(t){e.gridApi=t,t.rowEdit.on.saveRow(e,e.saveRow),t.selection.on.rowSelectionChanged(e,function(t){t.isSelected?e.selectedRows.push(t.entity.url_id):e.selectedRows.splice(e.selectedRows.indexOf(t.entity.url_id),1)})},r();var i=function(e){var t=60,a=30*e+t;angular.element(document.getElementsByClassName("gridStyle")[0]).css("height",a+"px")}}]).factory("BackendServiceUrl",["$http","$q",function(e,t){function a(){var t=e({method:"GET",url:s});return o(t)}function r(t){var a=e({method:"POST",data:t,url:s});return o(a)}function i(t,a){var r=e({method:"PUT",data:a,url:s+t});return o(r)}function n(t){var a=e({method:"DELETE",url:s+t});return o(a)}function d(){var t=e({method:"GET",url:"/api/urltype_dd/"});return o(t)}function o(e){var a=t.defer();return e.then(function(e){a.resolve(e)},function(e){a.reject(e)}),a.promise}var s="/api/urls/";return{getUrls:a,createUrl:r,updateUrl:i,deleteUrl:n,getUrlTypeDD:d}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
